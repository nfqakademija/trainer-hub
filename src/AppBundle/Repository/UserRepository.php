<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Training;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
    * Query to select trainers with feedbacks
    * @param Role $role
    * @return array
    */
    public function findByRolesWithFeedbacks($role)
    {
        return $this->createQueryBuilder('u')
            ->leftJoin('u.feedbackTo', 'f')
            ->addSelect('f')
            ->where('u.roles LIKE :role')
            ->setParameter(':role', '%"'.$role.'"%')->getQuery()->getArrayResult();
    }
    /**
    * Query to select trainers with trainings
    * @param User $user
    * @return array
    */
    public function findWithTrainings($user)
    {
        $username = $user['username'];

        return $this->createQueryBuilder('u')
            ->leftJoin('u.training', 't')
            ->addSelect('t')
            ->leftJoin('t.category', 'ca')
            ->addSelect('ca')
            ->leftJoin('t.city', 'ci')
            ->addSelect('ci')
            ->where('u.usernameCanonical = :username AND u.roles LIKE :roles')
            ->setParameters(['username' => $username, 'roles' => "%ROLE_TRAINER%"])
            ->getQuery()->getSingleResult();
    }
    /**
    * Query to filter trainers by city and category
    * @param Category $category
    * @param City     $city
    * @return array
    */
    public function filterBoth($category, $city)
    {
        return $this->createQueryBuilder('u')
            ->leftJoin('u.training', 't')
            ->addSelect('t')
            ->leftJoin('t.category', 'ca')
            ->addSelect('ca')
            ->leftJoin('t.city', 'ci')
            ->addSelect('ci')
            ->where('ca.title = :category AND ci.title = :city')
            ->setParameters(['category' => $category, 'city' => $city])
            ->getQuery()->getArrayResult();
    }
    /**
    * Query to filter trainers by city
    * @param City $city
    * @return array
    */
    public function filterByCity($city)
    {
        return $this->createQueryBuilder('u')
            ->leftJoin('u.training', 't')
            ->addSelect('t')
            ->leftJoin('t.category', 'ca')
            ->addSelect('ca')
            ->leftJoin('t.city', 'ci')
            ->addSelect('ci')
            ->where('ci.title = :city')
            ->setParameter(':city', $city)
            ->getQuery()->getArrayResult();
    }
    /**
    * Query to filter trainers by category
    * @param Category $category
    * @return array
    */
    public function filterByCategory($category)
    {
        return $this->createQueryBuilder('u')
            ->leftJoin('u.training', 't')
            ->addSelect('t')
            ->leftJoin('t.category', 'ca')
            ->addSelect('ca')
            ->leftJoin('t.city', 'ci')
            ->addSelect('ci')
            ->where('ca.title = :category')
            ->setParameter(':category', $category)
            ->getQuery()->getArrayResult();
    }
    public function findByRoles($role)
    {

        return $this->createQueryBuilder('u')->where('u.roles LIKE :role')
            ->setParameter(':role', '%"'.$role.'"%')->getQuery()->getArrayResult();
    }
}
